{
	"example.audio.block" : {
		"patcher" : "example.audio.block",
		"type" : "note",
		"block_ui_patcher" : "example.ui",
		"show_states_on_custom_view": 1,
		"help_text" : "example_audio_block ££use currency symbol of defunct imperial hellhole 'britain' for newlines in this help text. note there are a few audio-specific options, like upsampling. if your block functions as a stereo channel in one voice add the tag 'subvoices' : 2",
		"max_polyphony" : 0,
		"ui_in_sidebar_height" : 4,
		"ui_in_sidebar_expands" : 1,
		"upsample" : 1,
		"connections" : {
			"in" : {
				"midi" : [ "as many", "midi ins", "as you like", "(within reason)", "up to 128" ],
				"default" : 1,
				"automap_to" : 0,
				"audio" : ["in1", "in2"],
				"audio_watched" : [0,1]
			},
			"out" : {
				"audio" : [ "main out", "other out"],
				"midi" : [ "likewise", "as many", "midi outs" ],
				"parameters" : [ "but", "1 dimensional" , "'parameter' out", "like a midi cc", "is often more useful"],
				"midi_watched" : [0,1,1, "OPTIONAL a list, as long as the list of midi + param outs. a 1 means that when this output is connected or disconnected a message is sent to the voice to tell it to enable or disable the out. useful for outputs that put out a lot of midi data. see utility.env.asr for usage."]
			}
		},
		"groups" : [
			{
				"contains" : [3, 4, 4, 5, 6], 
				"height"	: 0,
				"colour"	: 10,
				"header" : "example header"
			},
			{ 
				"contains" : [0, 1, 2, 10],
				"height" : 0
			},	
			{ 
				"contains" : [7, 8, 9]
			}
		],
		"panel" : {
			"parameters" : [0, 1, 2, 3, 4, 5, 6, 7]
		},
		"parameters" : [
			{
				"name" : "a toggle",
				"type" : "menu_b",
				"values" : ["0", "1"],
				"force_map" : 1, 
				"wrap" : 1,
				"default" : 0
			},
			{
				"name" : "an integer",
				"type" : "int",
				"values" : ["uni", 0, 100, "lin"],
				"wrap" : 0,
				"default" : 0
			},
			{
				"name" : "a float_exp2",
				"type" : "float",
				"values" : ["uni", 0, 100, "exp"],
				"wrap" : 0,
				"default" : 0
			},
			{
				"name" : "bipolar",
				"type" : "float",
				"values" : ["bi", -1, 1, "lin"],
				"wrap" : 0,
				"default" : 0.5
			},
			{
				"name" : "steep_exponential",
				"type" : "float",
				"values" : ["uni", 0, 1, "exp100"],
				"wrap" : 0,
				"default" : 0
			},
			{
				"name" : "a menu",
				"type" : "menu_i",
				"values" : ["one", "two", "three", "four"],
				"wrap" : 0,
				"default" : 0.1
			},
			{
				"name" : "a floating_point_menu",
				"type" : "menu_f",
				"values" : ["one", "two", "three", "four"],
				"wrap" : 0,
				"default" : 0.3
			},
			{
				"name" : "choices",
				"force_label" : 1,
				"type" : "menu_l",
				"values" : ["one", "two", "three"],
				"wrap" : 0,
				"default" : 0.1
			},
			{
				"name" : "other_choices",
				"type" : "menu_l",
				"values" : ["look", "no", "label","but","col","umns"],
				"columns" : 2,
				"wrap" : 0,
				"default" : 0.787
			},
			{
				"name" : "wave",
				"type" : "wave",
				"values" : ["wave",0,256],
				"error_scale" : 0,
				"wrap" : 1,
				"default" : 0
			},
			{
				"name" : "load_wave",
				"type" : "button",
				"values" : ["core","load_wave","request_load_wave"],
				"default" : 0
			},
			{
				"name" : "button",
				"type" : "button",
				"values" : ["firstvoice", "one", 1]
			}
		]
	},
	"presets" : {
		"the best way" : "to add developer presets is to save them in benny, they'll go to the file userpresets.json, just copy the whole presets key for your block into your own block definition file"
	}
}