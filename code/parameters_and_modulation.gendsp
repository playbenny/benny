{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 9,
			"minor" : 0,
			"revision" : 5,
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"classnamespace" : "dsp.gen",
		"rect" : [ 134.0, 134.0, 935.0, 793.0 ],
		"gridsize" : [ 15.0, 15.0 ],
		"boxes" : [ 			{
				"box" : 				{
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 644.0, 696.0, 35.0, 22.0 ],
					"text" : "out 2"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 3.0, 4.0, 28.0, 22.0 ],
					"text" : "in 1"
				}

			}
, 			{
				"box" : 				{
					"code" : "// this works through the 'action list' the javascript has made,\r\n// sums up everything that makes a voice parameter value and puts it\r\n// all in the right place.\r\n\r\nBuffer block_parameter(\"parameter_value_buffer\");\r\nBuffer voice_parameter(\"voice_parameter_buffer\");\r\nBuffer error_spread(\"parameter_error_spread_buffer\");\r\nBuffer action_list(\"mod_sum_action_list\");\r\nBuffer mod_buffer(\"mod_buffer\");\r\nBuffer flock_buffer(\"flock_buffer\");\r\nBuffer flock_list(\"flock_list\");\r\nBuffer mtoa(\"mtoa_sigs\");\r\nBuffer changed_queue(\"changed_queue\");\r\nBuffer output_queue(\"output_queue\");\r\nBuffer voice_static_mod(\"voice_static_mod_buffer\");\r\n\r\nParam windx(0);\r\nParam windy(0);\r\nParam windz(0);\r\n//Param reset_pointers(0);\r\nParam pause(0);\r\n\r\nHistory action_pointer(0);\r\nHistory slowdown(0);\r\nHistory ch_q_pointer(0);\r\nHistory out_q_pointer(0);\r\nHistory how_many_actions(0);\r\nHistory slowcount(20);\r\n\r\nHistory w(0.1); //1 over weight\r\nHistory\tfr(0.98); //friction coeff\r\nHistory\tbco(-0.5);//bounce coeff\r\nHistory tension(0.1);\r\nHistory attrep(0.1);\r\nHistory align(0.1);\r\nHistory twist(0);\r\nHistory brownian(0);\r\n\r\npap=0; static_mod_index = 0;\r\n\r\nif(pause){\r\n\tch_q_pointer = 0;\r\n\tout_q_pointer = 0;\r\n}else{\r\n\tslowdown+=1;\r\n\tif(slowdown>slowcount){\r\n\t\tslowdown = 0;\r\n\t\tfor(bundle=128;bundle>0;bundle-=1){\r\n\t\t\ttotal = 0;\r\n\t\t\tdest_index, extra, dest_flag, wrap = peek(action_list,action_pointer,0, channels=4);\r\n\t\t\taction_pointer+=1;\r\n\t\t\tov=-100;\r\n\t\t\tif(dest_flag==1){\r\n\t\t\t\tov = peek(voice_parameter,dest_index,0,channels=1);\r\n\t\t\t\tstatic_mod_index = dest_index;\r\n\t\t\t}else if(dest_flag==3){\r\n\t\t\t\tov = peek(mtoa,dest_index,0,channels=1);\r\n\t\t\t}else if((dest_flag==5)||(dest_flag==2)){\r\n\t\t\t\tov = -100; //  5 ov and total are not used, this dest_flag is \r\n    \t\t// 'calculate flocks for this voice'\r\n\t\t\t// 2 is a flocked param, so you want it to fail the compare w ov so \r\n\t\t\t// that it runs the flock sim every cycle\t\t\t\r\n\t\t\t\tstatic_mod_index = -1 + peek(flock_buffer,dest_index,0,channels=1);\r\n\t\t\t}else{\r\n\t\t\t\tslowdown=-48000;\r\n\t\t\t}\r\n\t\r\n\t\t\td_i,src_index,src_type,lock_chance = peek(action_list,action_pointer,0, channels=4);\r\n\t\t\tlocked=0;\r\n\t\t\twhile(d_i==dest_index){\r\n\t\t\t\tif(src_type==2){//param value\r\n\t\t\t\t\ttotal += peek(block_parameter,src_index,0,channels=1);\r\n\t\t\t\t\ttotal += peek(voice_static_mod,static_mod_index,0,channels=1);\r\n\t\t\t\t}else if(src_type==3){//error spread\r\n\t\t\t\t\ttotal += peek(error_spread,src_index,0,channels=1);\r\n\t\t\t\t}else if(src_type==4){//modulation\r\n\t\t\t\t\ttotal += peek(mod_buffer,src_index,0,channels=1);\r\n\t\t\t\t}else if(src_type==5){// 5-8 are flock variables\r\n\t\t\t\t\tw = src_index; //0.1; //1 over weight\r\n\t\t\t\t\tfr = lock_chance; //0.98; //friction coeff\r\n\t\t\t\t}else if(src_type==6){// 5-8 are flock variables\r\n\t\t\t\t\tbco = src_index; //-0.5; //bounce coeff\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\ttension = lock_chance;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t}else if(src_type==7){// 5-8 are flock variables\r\n\t\t\t\t\tattrep = src_index;\r\n\t\t\t\t\talign = lock_chance;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t}else if(src_type==8){// 5-8 are flock variables\r\n\t\t\t\t\ttwist = src_index;\r\n\t\t\t\t\tbrownian = lock_chance;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t}else if(src_type==1){//lockup\r\n\t\t\t\t\tif(src_index>0){\r\n\t\t\t\t\t\t//decrease value by one, roll the action pointer to the end\r\n\t\t\t\t\t\tsrc_index-=1;\t\t\t\t\t\t\r\n\t\t\t\t\t\tpoke(action_list,src_index,action_pointer,1,0);\r\n\t\t\t\t\t\tlocked=1;\r\n\t\t\t\t\t\twhile(d_i==dest_index){\r\n\t\t\t\t\t\t\taction_pointer+=1;\r\n\t\t\t\t\t\t\td_i=peek(action_list,action_pointer,0, channels=1);\r\n\t\t\t\t\t\t\tif(action_pointer>99999) d_i=-1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\taction_pointer-=1; //it gets incremented at the end of this while loop, so this undoes that.\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t//roll dice to see if it locks, if so store value.\r\n\t\t\t\t\t\tif(noise()>1-lock_chance){\r\n\t\t\t\t\t\t\tpoke(action_list,5+(lock_chance+0.0001)*(0.0001+lock_chance)*600000000*noise(), action_pointer, 1,0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!locked){\r\n\t\t\t\t\tif(wrap==1){\r\n\t\t\t\t\t\ttotal=(100+total) % 1;\r\n\t\t\t\t\t}else if(wrap==2){\r\n\t\t\t\t\t\ttotal = clip(total,0,1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\taction_pointer+=1;\r\n\t\t\t\td_i,src_index,src_type,lock_chance = peek(action_list,action_pointer,0, channels=4);\r\n\t\t\t\tif(action_pointer>99999) d_i=-1;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif((!locked)&&(total!=ov)){\r\n\t\t\t\tif(dest_flag==1){ //param\r\n\t\t\t\t\tpoke(voice_parameter,total,dest_index);\r\n\t\t\t\t\tif(((total-ov)>0.0001)||((total-ov)<-0.0001)){\r\n\t\t\t\t\t\t//flag as a change\r\n\t\t\t\t\t\tpoke(changed_queue, 1+extra, ch_q_pointer, 0, 0);\r\n\t\t\t\t\t\tch_q_pointer+=1;\r\n\t\t\t\t\t\tch_q_pointer%=1024;\r\n\t\t\t\t\t\t//poke(changed_queue, 0, ch_q_pointer,0,0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(dest_flag==2){  //flocked\r\n\t\t\t\t\t//total gets put in the flock_buffer\r\n\t\t\t\t\tpoke(flock_buffer, total, dest_index, 1,0);\r\n\t\t\t\t}else if(dest_flag==3){  //signal (midi to audio inputs to all blocks/hw)\r\n\t\t\t\t\tpoke(mtoa,total,dest_index,0,index=\"samples\");\r\n\t\t\t\t\tpoke(output_queue, 2, out_q_pointer, 0,0);\r\n\t\t\t\t\tpoke(output_queue, dest_index, out_q_pointer, 1, 0);\r\n\t\t\t\t\tpoke(output_queue, total, out_q_pointer, 2, 0);\r\n\t\t\t\t\tout_q_pointer+=1;\r\n\t\t\t\t\tif(out_q_pointer>1023)out_q_pointer=0;\r\n\t\t\t\t\tpoke(output_queue, 0, out_q_pointer,0,0);\r\n\t\t\t\t}else if(dest_flag==5){\r\n\t\t\t\t\t//DO FLOCKS!!!\r\n\t\t\t\t\t\r\n\t\t\t\t\tv = dest_index;\r\n\t\t\t\t\t\r\n\t\t\t\t\tf_x = 0; f_y = 0; f_z = 0; \r\n\t\t\t\t\t//the bp_ values are all stored +1 so you can compare ethem to 0\r\n\t\t\t\t\tbp_x,t_x,v_x,p_x = peek(flock_buffer,3*v  ,0,channels=4);\r\n\t\t\t\t\tbp_y,t_y,v_y,p_y = peek(flock_buffer,3*v+1,0,channels=4);\r\n\t\t\t\t\tbp_z,t_z,v_z,p_z = peek(flock_buffer,3*v+2,0,channels=4);\r\n\t\t\t\t\r\n\t\t\t\t\tif(bp_x>0)\tf_x = tension*(t_x - p_x);\r\n\t\t\t\t\tif(bp_y>0)\tf_y = tension*(t_y - p_y);\r\n\t\t\t\t\tif(bp_z>0)\tf_z = tension*(t_z - p_z);\r\n\t\t\t\t\r\n\t\t\t\t\tif(brownian>0){\r\n\t\t\t\t\t\tf_x += brownian*(noise()-noise());\r\n\t\t\t\t\t\tf_y += brownian*(noise()-noise());\r\n\t\t\t\t\t\tf_z += brownian*(noise()-noise());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tf_x += windx;\r\n\t\t\t\t\tf_y += windy;\r\n\t\t\t\t\tf_z += windz;\r\n\t\t\t\t\t// HERE, compare to all other particles and add into force vector f_x etc\r\n\t\t\t\t\tfll = peek(flock_list, 0,0);\r\n\t\t\t\t\r\n\t\t\t\t\tfor(fi=1;fi<=fll;fi+=1){\r\n\t\t\t\t\t\ti = peek(flock_list, fi, 0);\r\n\t\t\t\t\t\tif(i!=v){\r\n\t\t\t\t\t\t\tcv_x,c_x = peek(flock_buffer, 3*i, 2,channels=2);\r\n\t\t\t\t\t\t\tcv_y,c_y = peek(flock_buffer, 3*i+1, 2,channels=2);\r\n\t\t\t\t\t\t\tcv_z,c_z = peek(flock_buffer, 3*i+2, 2,channels=2);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\td_x = c_x - p_x;\t\t\t\t\t\r\n\t\t\t\t\t\t\td_y = c_y - p_y;\r\n\t\t\t\t\t\t\td_z = c_z - p_z;\r\n\t\t\t\t\t\t\tdsq = d_x*d_x + d_y*d_y + d_z*d_z;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(dsq!=0){\r\n\t\t\t\t\t\t\t\td2 = 0.002*pow(clip(dsq,0.025,3), -0.5); //was -1.5\r\n\t\t\t\t\t\t\t\ttd = d2  * attrep;\r\n\t\t\t\t\t\t\t\tf_x += d_x * td;\r\n\t\t\t\t\t\t\t\tf_y += d_y * td;\r\n\t\t\t\t\t\t\t\tf_z += d_z * td;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\ttd = d2 * align * 0.5;\r\n\t\t\t\t\t\t\t\tv_x += cv_x * td;\r\n\t\t\t\t\t\t\t\tv_y += cv_y * td;\r\n\t\t\t\t\t\t\t\tv_z += cv_z * td;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tantitwist = (1 - twist);\r\n\t\t\t\t\tif(twist<0){\r\n\t\t\t\t\t\tantitwist = 1 + twist;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(bp_x>0){\r\n\t\t\t\t\t\tv_x += (antitwist * f_x + twist * f_z) * w;\r\n\t\t\t\t\t\tv_x *= fr;\r\n\t\t\t\t\t\tv_x = clip(v_x, -0.1, 0.1);\r\n\t\t\t\t\t\tp_x += v_x;\r\n\t\t\t\t\t\tclp = clip(p_x,0,1);\r\n\t\t\t\t\t\tif(clp != p_x){\r\n\t\t\t\t\t\t\tv_x *= bco;\r\n\t\t\t\t\t\t\tp_x = clp;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpoke(voice_parameter,p_x,bp_x-1,0,0);\r\n\t\t\t\t\t\tpoke(flock_buffer, v_x, 3*v, 2, 0);\r\n\t\t\t\t\t\tpoke(flock_buffer, p_x, 3*v, 3, 0);\t\t\t\t\r\n\t\t\t\t\t\tif((v_x>0.0001)||(v_x<-0.0001)){\r\n\t\t\t\t\t\t\tpoke(changed_queue, bp_x+wrap, ch_q_pointer, 0, 0);\r\n\t\t\t\t\t\t\tch_q_pointer+=1;\r\n\t\t\t\t\t\t\tch_q_pointer%=1024;\r\n\t\t\t\t\t\t\t//poke(changed_queue, 0, ch_q_pointer, 0, 0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(bp_y>0){\r\n\t\t\t\t\t\tv_y += (antitwist * f_y - twist * f_x) * w;\r\n\t\t\t\t\t\tv_y *= fr;\r\n\t\t\t\t\t\tv_y = clip(v_y, -0.1, 0.1);\r\n\t\t\t\t\t\tp_y += v_y;\r\n\t\t\t\t\t\tclp = clip(p_y,0,1);\r\n\t\t\t\t\t\tif(clp!= p_y){\r\n\t\t\t\t\t\t\tv_y *= bco;\r\n\t\t\t\t\t\t\tp_y = clp;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpoke(voice_parameter,p_y,bp_y-1,0,0);\r\n\t\t\t\t\t\tpoke(flock_buffer, v_y, 3*v+1, 2, 0);\r\n\t\t\t\t\t\tpoke(flock_buffer, p_y, 3*v+1, 3, 0);\r\n\t\t\t\t\t\tif((v_y>0.0001)||(v_y<-0.0001)){\r\n\t\t\t\t\t\t\tpoke(changed_queue, bp_y+wrap, ch_q_pointer, 0, 0);\r\n\t\t\t\t\t\t\tch_q_pointer+=1;\r\n\t\t\t\t\t\t\tch_q_pointer%=1024;\r\n\t\t\t\t\t\t\t//poke(changed_queue, 0, ch_q_pointer, 0, 0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(bp_z>0){\r\n\t\t\t\t\t\tv_z += (antitwist * f_z + twist * f_y) * w;\r\n\t\t\t\t\t\tv_z *= fr;\r\n\t\t\t\t\t\tv_z = clip(v_z, -0.1, 0.1);\r\n\t\t\t\t\t\tp_z += v_z;\r\n\t\t\t\t\t\tclp = clip(p_z,0,1);\r\n\t\t\t\t\t\tif(clp != p_z){\r\n\t\t\t\t\t\t\tv_z *= bco;\r\n\t\t\t\t\t\t\tp_z = clp;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpoke(voice_parameter,p_z,bp_z-1,0,0);\r\n\t\t\t\t\t\tpoke(flock_buffer, v_z, 3*v+2, 2, 0);\r\n\t\t\t\t\t\tpoke(flock_buffer, p_z, 3*v+2, 3, 0);\t\t\t\t\r\n\t\t\t\t\t\tif((v_z>0.0001)||(v_z<-0.0001)){\r\n\t\t\t\t\t\t\tpoke(changed_queue, bp_z+wrap, ch_q_pointer, 0, 0);\r\n\t\t\t\t\t\t\tch_q_pointer+=1;\r\n\t\t\t\t\t\t\tch_q_pointer%=1024;\r\n\t\t\t\t\t\t\t//poke(changed_queue, 0, ch_q_pointer, 0, 0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t \t\t\r\n\t\t\t\t\t//if(ch_q_pointer > 1023) ch_q_pointer = 0;\r\n\t\t\t\t\t//poke(changed_queue, 0, ch_q_pointer, 0, 0);\r\n\t\t\t\t}\r\n\t\t\t\tpoke(changed_queue, 0, ch_q_pointer, 0, 0);\r\n\t\t\t}\r\n\t\r\n\t\t\tif(d_i==-1){\r\n\t\t\t\tbundle=-1;\r\n\t\t\t\tif(action_pointer<10000){\r\n\t\t\t\t\thow_many_actions = action_pointer;\r\n\t\t\t\t\tslowcount =  (vectorsize * 3 / clip(floor(how_many_actions*0.0078125 /*/128*/)+1, 1, 512)) - 1;//1 + 200000/clip(how_many_actions, 1, 4000);\r\n\t\t\t\t\taction_pointer=0;\t\t\r\n\t\t\t\t\tpap=1;\t\t\r\n\t\t\t\t}else{\r\n\t\t\t\t\tslowcount = 50;\r\n\t\t\t\t\taction_pointer = 0;\r\n\t\t\t\t\tpap=1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nout1 = pap;//delta(action_pointer)<0;\r\nout2 = how_many_actions;",
					"fontface" : 0,
					"fontname" : "<Monospaced>",
					"fontsize" : 12.0,
					"id" : "obj-3",
					"maxclass" : "codebox",
					"numinlets" : 1,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 3.0, 31.0, 869.0, 643.0 ]
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-4",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 2.0, 693.0, 35.0, 22.0 ],
					"text" : "out 1"
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 0 ],
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-2", 0 ],
					"source" : [ "obj-3", 1 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-4", 0 ],
					"source" : [ "obj-3", 0 ]
				}

			}
 ],
		"originid" : "pat-786"
	}

}
