{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 9,
			"minor" : 0,
			"revision" : 4,
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"classnamespace" : "dsp.gen",
		"rect" : [ 134.0, 134.0, 1061.0, 595.0 ],
		"gridsize" : [ 15.0, 15.0 ],
		"boxes" : [ 			{
				"box" : 				{
					"id" : "obj-5",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 611.0, 14.0, 28.0, 22.0 ],
					"text" : "in 3"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-7",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 515.0, 662.0, 35.0, 22.0 ],
					"text" : "out 2"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 50.0, 14.0, 28.0, 22.0 ],
					"text" : "in 1"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 515.0, 14.0, 28.0, 22.0 ],
					"text" : "in 2"
				}

			}
, 			{
				"box" : 				{
					"code" : "require \"osc_functions\";\r\nBuffer shape(\"osc_shape_lookup\");\r\nBuffer mtof_lookup(\"mtof_lookup\");\r\nBuffer prm(\"voice_parameter_buffer\");\r\nBuffer detuning(\"detuning\");\r\n\r\nHistory cursor_s1(0),cursor_s2(0),cursor_p1(0),cursor_p2(0);\r\nHistory ws1,ws2,s_unstab,p_unstab,range1,range2,detune1,detune2,porta1,porta2,cr1,cr2,sr1,sr2,sha1,sha_off1(0),sha2,sha_off2(0),mgain1,mgain2,again1,again2,fm1,am1,fm2,am2,sm1,sm2;\r\nHistory osc1,osc2,vca1,vca2,vfm1,vam1,vfm2,vam2,vsm1,vsm2;\r\n\r\nHistory at,su,de,cu,lo,ve,ac,cu_t(0),cu_a(0),cu_f(0);\r\nHistory ov(0);  //last non-zero velocity\r\nHistory oov(0); //just for detect change\r\nHistory otrig(0); //likewise\r\nHistory op(0); //old pitch\r\nHistory env(0);\r\nHistory attdone(1); \r\nHistory decdone(1); \r\nHistory target(0);\r\nHistory attrate(0.00001); \r\nHistory decrate(0.00001);\r\n\r\nHistory at2,su2,de2,cu2,lo2,ve2,ac2,cu_t2(0),cu_a2(0),cu_f2(0);\r\nHistory ov2(0);  //last non-zero velocity\r\nHistory oov2(0); //just for detect change\r\nHistory otrig2(0); //likewise\r\nHistory op2(0); //old pitch\r\nHistory env2(0);\r\nHistory attdone2(1); \r\nHistory decdone2(1); \r\nHistory target2(0);\r\nHistory attrate2(0.00001); \r\nHistory decrate2(0.00001);\r\nHistory upda(0);\r\n\r\nParam voice_is(0, min=0,default=0,max=4096);\r\nParam voice_offset(0);\r\nParam p(0,min=0,default=64,max=128);\r\nParam v1(0,min=-1000,default=0,max=1000);\r\nParam v2(0,min=-1000,default=0,max=1000);\r\nParam panic(0);\r\nParam latch(0);\r\nParam cont(1);\r\n\r\nif(upda==0){\r\n\tupda = 1;\r\n\tws1 = peek(prm,voice_offset, 0,channels=1);\r\n\trange1 = 12*floor((peek(prm,1+ voice_offset,0, channels=1)*18 - 16));\r\n\tdetune1 = 48*(peek(prm,2+ voice_offset,0, channels=1)-0.5);\r\n\tporta1 = 100*peek(prm,3+voice_offset,0, channels=1);\r\n\tporta1 = porta1*porta1;\r\n\tporta1 = mstosamps(porta1);\r\n\tfm1 = 2*(peek(prm,4+voice_offset,0, channels=1)-0.5);\r\n\tfm1 = abs(fm1)*fm1*10;\r\n\tam1 = 2*(peek(prm,5+voice_offset,0, channels=1)-0.5);\r\n\tam1 = abs(am1)*am1;\r\n\tsm1 = 2*(peek(prm,6+voice_offset,0, channels=1)-0.5);\r\n\tsm1 = abs(sm1)*sm1;\r\n\tvfm1 = 2*(peek(prm,7+voice_offset,0, channels=1)-0.5);\r\n\tvfm1 = abs(vfm1)*vfm1*10;\r\n\tvam1 = 2*(peek(prm,8+voice_offset,0, channels=1)-0.5);\r\n\tvam1 = abs(vam1)*vam1;\r\n\tvsm1 = 2*(peek(prm,9+voice_offset,0, channels=1)-0.5);\r\n\tvsm1 = abs(vsm1)*vsm1;\r\n\r\n\tws2 = peek(prm,10+voice_offset, 0,channels=1);\r\n\trange2 = 12*floor((peek(prm,11+ voice_offset,0, channels=1)*18 - 16));\r\n\tdetune2 = 48*(peek(prm,12+ voice_offset,0, channels=1)-0.5);\r\n\tporta2 = 100*peek(prm,13+voice_offset,0, channels=1);\r\n\tporta2 = porta2*porta2;\r\n\tporta2 = mstosamps(porta2);\r\n\tfm2 = 2*(peek(prm,14+voice_offset,0, channels=1)-0.5);\r\n\tfm2 = abs(fm2)*fm2*10;\r\n\tam2 = 2*(peek(prm,15+voice_offset,0, channels=1)-0.5);\r\n\tam2 = abs(am2)*am2;\r\n\tsm2 = 2*(peek(prm,16+voice_offset,0, channels=1)-0.5);\r\n\tsm2 = abs(sm2)*sm2;\r\n\tvfm2 = 2*(peek(prm,17+voice_offset,0, channels=1)-0.5);\r\n\tvfm2 = abs(vfm2)*vfm2*10;\r\n\tvam2 = 2*(peek(prm,18+voice_offset,0, channels=1)-0.5);\r\n\tvam2 = abs(vam2)*vam2;\r\n\tvsm2 = 2*(peek(prm,19+voice_offset,0, channels=1)-0.5);\r\n\tvsm2 = abs(vsm2)*vsm2;\r\n\r\n\tat = peek(prm, 20+voice_offset, 0, channels=1);\r\n\tat = (pow(1000,at)-1+0.0000000001)*60.06006006006006006006006006006;\r\n\tsu = peek(prm, 21+voice_offset, 0, channels=1);\r\n\tde = peek(prm, 22+voice_offset, 0, channels=1);\r\n\tde = (pow(1000,de)-1+0.0000000001)*60.06006006006006006006006006006;\r\n\tcu = peek(prm, 23+voice_offset, 0, channels=1);\r\n\tlo = peek(prm, 24+voice_offset, 0, channels=1);\r\n\tve = peek(prm, 25+voice_offset, 0, channels=1)*2 - 1;\r\n\tac = peek(prm, 26+voice_offset, 0, channels=1)*2 - 1;\t\r\n\tcu_f=cu*4;\t\r\n\tcu_t=floor(cu_f);\r\n\tcu_f-=cu_t;\r\n\tcu_t+=1;\r\n\tt=1+abs(cu-0.45)*23;\r\n\tattrate=t/mstosamps(at);\r\n\tdecrate=-t/mstosamps(de);\t\r\n\r\n\tat2 = peek(prm, 27+voice_offset, 0, channels=1);\r\n\tat2 = (pow(1000,at2)-1+0.0000000001)*60.06006006006006006006006006006;\r\n\tsu2 = peek(prm, 28+voice_offset, 0, channels=1);\r\n\tde2 = peek(prm, 29+voice_offset, 0, channels=1);\r\n\tde2 = (pow(1000,de2)-1+0.0000000001)*60.06006006006006006006006006006;\r\n\tcu2 = peek(prm, 30+voice_offset, 0, channels=1);\r\n\tlo2 = peek(prm, 31+voice_offset, 0, channels=1);\r\n\tve2 = peek(prm, 32+voice_offset, 0, channels=1)*2 - 1;\r\n\tac2 = peek(prm, 33+voice_offset, 0, channels=1)*2 - 1;\t\r\n\tcu_f2=cu2*4;\t\r\n\tcu_t2=floor(cu_f2);\r\n\tcu_f2-=cu_t2;\r\n\tcu_t2+=1;\r\n\tt=1+abs(cu2-0.45)*23;\r\n\tattrate2=t/mstosamps(at2);\r\n\tdecrate2=-t/mstosamps(de2);\t\r\n\r\n\tp_unstab = peek(prm,34+ voice_offset, 0,channels=1);\r\n\tp_unstab *= p_unstab*p_unstab*20;\r\n\tcr1 = 0.000001*p_unstab/(voice_is*5180+1000);\r\n\tcr2 = 0.000001*p_unstab/(voice_is*4690+1200);\r\n\t\r\n\ts_unstab = peek(prm,35+ voice_offset,0, channels=1);\r\n\ts_unstab *= s_unstab*8;\r\n\tsr1 = s_unstab/(voice_offset*3260+4200);\r\n\tsr2 = s_unstab/(voice_offset*4320+3200);\r\n\t\r\n\tmgain1 = peek(prm,36+voice_offset,0, channels=1);\r\n\tmgain2 = peek(prm,37+voice_offset,0, channels=1);\r\n\tagain1 = peek(prm,38+voice_offset,0, channels=1);\r\n\tagain2 = peek(prm,39+voice_offset,0, channels=1);\r\n\tsame1 = peek(prm,40+voice_offset,0, channels=1)>0.5;\r\n\tsame2 = peek(prm,41+voice_offset,0, channels=1)>0.5;\r\n\tcu_a = same1 ? cu_t : (5-cu_t);\r\n\tcu_a2 = same2 ? cu_t2 : (5-cu_t2);\t\r\n}\r\n\r\n\r\nupda = (upda + cont);// & 255;\r\nupda *= (upda < vectorsize);\r\n\r\n\r\ncursor_p1 += cr1;\r\ncursor_s1 += sr1;\r\ncursor_p1 = wrap(cursor_p1);\r\ncursor_s1 = wrap(cursor_s1);\r\n\r\ncursor_p2 += cr2;\r\ncursor_s2 += sr2;\r\ncursor_p2 = wrap(cursor_p2);\r\ncursor_s2 = wrap(cursor_s2);\r\n\r\npink_s1 = sample(detuning,cursor_s1,0);\r\npink_p1 = sample(detuning,cursor_p1,0);\r\npink_s2 = sample(detuning,cursor_s2,0);\r\npink_p2 = sample(detuning,cursor_p2,0);\r\n\r\nsh1 = ws1 + s_unstab*pink_s1;\r\nsh2 = ws2 + s_unstab*pink_s2;\r\n\r\nsdif = sh1+sha_off1 - sha1;\r\nif(sdif>0.5) sha_off1-=1;\r\nif(sdif<-0.5) sha_off1+=1;\r\nsha1 = sm1*osc2 + vsm1*vca2 + slide(sh1 + sha_off1,5000,5000);\r\nsin_l1, tri_l1, rec_l1, pw1 = sample(shape, wrap(sha1) , 0, channels=4);\r\n\r\npitch = slide(p,porta1,porta1) + (slide(p_unstab,100,100)*pink_p1)+range1+(slide(detune1,100,100));\r\ntra=1;\r\nif(pitch<0){\r\n\ttra = floor(-pitch/12)+1;\r\n\tpitch += 12*tra;\r\n\ttra = pow(2, -tra);\r\n}else{\r\n\tif(pitch>128) pitch=128;\r\n}\r\npit1 = tra*peek(mtof_lookup,pitch, (voice_is % 8), channels=1, interp = \"linear\");\r\n\r\npitch = slide(p,porta2,porta2) + (slide(p_unstab,100,100)*pink_p2)+range2+(slide(detune2,100,100));\r\ntra=1;\r\nif(pitch<0){\r\n\ttra = floor(-pitch/12)+1;\r\n\tpitch += 12*tra;\r\n\ttra = pow(2, -tra);\r\n}else{\r\n\tif(pitch>128) pitch=128;\r\n}\r\npit2 = tra*peek(mtof_lookup,pitch, (voice_is % 8), channels=1, interp = \"linear\");\r\n\r\ndelt = (delta(in3!=0)>0);\r\nrec1 =  eptr_rect2(pit1,in1+fm1*osc2+vfm1*vca2,pw1, delt);\r\nsinph1 = phasor(pit1*(1+in1+fm1*osc2+vfm1*vca2),delt);\r\nsaw1 =  integrator_saw(rec1, pit1*(1+in1+fm1*osc2+vfm1*vca2), pw1, delt);\r\nosc1 =  sin_l1 * cycle(sinph1+0.75,index = \"phase\");\r\nosc1 += tri_l1 * saw1 + rec_l1 * rec1;\r\nosc1 *= (1-am1+am1*osc2+vam1*vca2);\r\n\r\ntrig=0;\r\nvi=0;\r\nif((delta(lo>0)>0)&&(env==0)){\r\n\tvi=1;\r\n\ttrig=1;\r\n\tupda = 0;\r\n}\r\nlevscale = 0;\r\n\r\nif(v1>0){\r\n\tlevscale = v1 * ve + (1-clip(ve,0,2));\r\n}else if(v1<0){\r\n\tlevscale = -v1 * ve + (1-clip(ve,0,2));\r\n\tsu=0;\r\n}\r\n\r\nif((su>0) && (v1>=0)){\r\n\tvi += levscale; \r\n\tif(vi!=oov){ //follow behaviour\r\n\t\toov=vi;\r\n\t\tov=vi;\r\n\t\ttarget=vi;\r\n\t\tif(target<=env){\r\n\t\t\tattdone=1;\r\n\t\t\tdecdone=0;\r\n\t\t\tif((target == 0)&&(latch>2)) upda = 0;\r\n\t\t}else{\r\n\t\t\tdecdone=1;\r\n\t\t\tattdone=0;\r\n\t\t\tif((latch+(env==0))>1) upda = 0;\r\n\t\t}\r\n\t}\r\n}else{\r\n\ttrig += levscale;\r\n\tif((v1!=oov)||(p!=op)){//(delta(trig>0)==1)){//trigger behaviour\r\n\t\tif(trig>0){\r\n\t\t\tif(latch != 0) upda = 0;\t\t\t\r\n\t\t\top=p;\r\n\t\t\tattdone=0;\r\n\t\t\tdecdone=1;\r\n\t\t\toov=v1;\r\n\t\t\tov = levscale+ac*env;\r\n\t\t\tov = clip(ov,-4,4);\r\n\t\t\tov = ov - (ov*ov*ov*0.04166666);\r\n\t\t\ttarget=ov;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nif(panic) {\r\n\ttarget=0;\r\n\tdecdone=0;\r\n\tdecrate=-0.001;\r\n\tenv*=0.999;\r\n}\r\n\r\nif(!attdone){\r\n\tt=clip(target-env,0,0.9999);\r\n\tif(t>0.0001){\r\n\t\tdx = selector(cu_a,(1-t)*(1-t*cu_f),1+t*(cu_f-1),1+cu_f*(t-1),(t+0.01)*(1+cu_f*(t-0.99)));//,(t+0.1)*(t+0.01));\r\n\t\tdx*=attrate;\r\n\t\tdx=clip(dx,0.0000001,t);\r\n\t\tenv+=dx;\r\n\t}else{\r\n\t\tenv=target;\r\n\t\tattdone=1;\r\n\t\tdecdone=0;\r\n\t\ttarget = su * v1;\r\n\t}\r\n}\r\nif(!decdone){\r\n\tt=clip(target-env,-0.9999,0.9999);\r\n\tif(t<-0.001){\r\n\t\tdx = selector(cu_t,((t+1)*(t+1)-1)*(1-cu_f)+cu_f*t,t-cu_f*(t+1),-1-cu_f*t,-1-t*(1+cu_f+cu_f*t));\r\n\t\tdx*= -decrate;\r\n\t\tdx=clip(dx,t,-0.0000000001);\r\n\t\tenv+=dx;\r\n\t}else{\r\n\t\tenv=target;\r\n\t\tdecdone=1;\r\n\t\tif(lo){\r\n\t\t\tov = ov*lo;\r\n\t\t\tif(ov>0.001){\r\n\t\t\t\tattdone=0;\r\n\t\t\t\ttarget=ov*lo;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvca1 = env * osc1;\r\n\r\n\r\nsdif = sh2+sha_off2 - sha2;\r\nif(sdif>0.5) sha_off2-=1;\r\nif(sdif<-0.5) sha_off2+=1;\r\nsha2 = sm2*osc1 + vsm2*vca1 + slide(sh2 + sha_off2,5000,5000);\r\nsin_l2, tri_l2, rec_l2, pw2 = sample(shape, wrap(sha2) , 0, channels=4);\r\n\r\n\r\nrec2 =  eptr_rect2(pit2,in2+fm2*osc1+vfm2*vca1,pw2, delt);\r\nsinph2 = phasor(pit2*(1+in2+fm2*osc1+vfm2*vca1),delt);\r\n\r\n/*rec=0; sinph=0;\r\ndelt = 0;\r\n/*if(fmmode<0.33){\r\n\tdelt = (delta(in3!=0)>0);\r\n\trec =  eptr_rect2(pit,in1,pw, delt);\r\n\tsinph = phasor(pit*(1+in1),delt);\r\n}else if(fmmode<0.66){\r\n\tdelt = (delta(in1!=0)>0) || (delta(in3!=0)>0);\r\n\trec =  eptr_rect(pit,delt,pw, sync=1);\r\n\tsinph = phasor(pit,delt);\r\n}else { \r\n\tdelt = (delta(in1!=0)>0) || (delta(in3!=0)>0);\r\n\trec =  eptr_rect(pit,in1,pw, sync=2);\r\n\tsinph = phasor(pit*(1+in1),delt);\r\n}*/\r\nsaw2 =  integrator_saw(rec2, pit2*(1+in2+fm2*osc1+vfm2*vca1), pw2, delt);\r\nosc2 =  sin_l2 * cycle(sinph2+0.75,index = \"phase\");\r\nosc2 += tri_l2 * saw2 + rec_l2 * rec2;\r\nosc2 *= (1-am2+am2*osc1+vam2*vca1);\r\n\r\ntrig2=0;\r\nvi2=0;\r\nif((delta(lo2>0)>0)&&(env2==0)){\r\n\tvi2=1;\r\n\ttrig2=1;\r\n\tupda = 0;\r\n}\r\nlevscale2 = 0;\r\n\r\nif(v2>0){\r\n\tlevscale2 = v2 * ve2 + (1-clip(ve2,0,2));\r\n}else if(v2<0){\r\n\tlevscale = -v2 * ve2 + (1-clip(ve2,0,2));\r\n\tsu2=0;\r\n}\r\n\r\nif((su2>0) && (v2>=0)){\r\n\tvi2 += levscale2; \r\n\tif(vi2!=oov2){ //follow behaviour\r\n\t\toov2=vi2;\r\n\t\tov2=vi2;\r\n\t\ttarget2=vi2;\r\n\t\tif(target2<=env2){\r\n\t\t\tattdone2=1;\r\n\t\t\tdecdone2=0;\r\n\t\t\tif((target == 0)&&(latch>2)) upda = 0;\r\n\t\t}else{\r\n\t\t\tdecdone2=1;\r\n\t\t\tattdone2=0;\r\n\t\t\tif((latch+(env==0))>1) upda = 0;\r\n\t\t}\r\n\t}\r\n}else{\r\n\ttrig2 += levscale2;\r\n\tif((v2!=oov2)||(p!=op2)){//(delta(trig>0)==1)){//trigger behaviour\r\n\t\tif(trig2>0){\r\n\t\t\top2=p;\r\n\t\t\tif(latch != 0) upda = 0;\r\n\t\t\tattdone2=0;\r\n\t\t\tdecdone2=1;\r\n\t\t\toov2=v2;\r\n\t\t\tov2 = levscale2+ac2*env2;\r\n\t\t\tov2 = clip(ov2,-4,4);\r\n\t\t\tov2 = ov2 - (ov2*ov2*ov2*0.04166666);\r\n\t\t\ttarget2=ov2;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nif(panic) {\r\n\ttarget2=0;\r\n\tdecdone2=0;\r\n\tdecrate2=-0.001;\r\n\tenv2*=0.999;\r\n}\r\n\r\nif(!attdone2){\r\n\tt=clip(target2-env2,0,0.9999);\r\n\tif(t>0.0001){\r\n\t\tdx = selector(cu_a2,(1-t)*(1-t*cu_f2),1+t*(cu_f2-1),1+cu_f2*(t-1),(t+0.01)*(1+cu_f2*(t-0.99)));//,(t+0.1)*(t+0.01));\r\n\t\tdx*=attrate2;\r\n\t\tdx=clip(dx,0.0000001,t);\r\n\t\tenv2+=dx;\r\n\t}else{\r\n\t\tenv2=target2;\r\n\t\tattdone2=1;\r\n\t\tdecdone2=0;\r\n\t\ttarget2 = su2 * v2;\r\n\t}\r\n}\r\nif(!decdone2){\r\n\tt=clip(target2-env2,-0.9999,0.9999);\r\n\tif(t<-0.001){\r\n\t\tdx = selector(cu_t2,((t+1)*(t+1)-1)*(1-cu_f2)+cu_f2*t,t-cu_f2*(t+1),-1-cu_f2*t,-1-t*(1+cu_f2+cu_f2*t));\r\n\t\tdx*= -decrate2;\r\n\t\tdx=clip(dx,t,-0.0000000001);\r\n\t\tenv2+=dx;\r\n\t}else{\r\n\t\tenv2=target2;\r\n\t\tdecdone2=1;\r\n\t\tif(lo2){\r\n\t\t\tov2 = ov2*lo2;\r\n\t\t\tif(ov2>0.001){\r\n\t\t\t\tattdone2=0;\r\n\t\t\t\ttarget2=ov2*lo2;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nvca2 = env2 * osc2;\r\n\r\nout1 = vca1 * slide(mgain1,1000,1000) + vca2 * slide(mgain2,1000,1000);\r\nout2 = vca1 * slide(again1,1000,1000) + vca2 * slide(again2,1000,1000);",
					"fontface" : 0,
					"fontname" : "<Monospaced>",
					"fontsize" : 12.0,
					"id" : "obj-3",
					"maxclass" : "codebox",
					"numinlets" : 3,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 50.0, 44.0, 738.0, 598.0 ]
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-4",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 50.0, 662.0, 35.0, 22.0 ],
					"text" : "out 1"
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 0 ],
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 1 ],
					"source" : [ "obj-2", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-4", 0 ],
					"source" : [ "obj-3", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-7", 0 ],
					"source" : [ "obj-3", 1 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 2 ],
					"source" : [ "obj-5", 0 ]
				}

			}
 ],
		"originid" : "pat-6606"
	}

}
