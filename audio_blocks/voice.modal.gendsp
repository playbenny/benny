{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 9,
			"minor" : 0,
			"revision" : 3,
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"classnamespace" : "dsp.gen",
		"rect" : [ 34.0, 76.0, 1221.0, 701.0 ],
		"gridsize" : [ 15.0, 15.0 ],
		"boxes" : [ 			{
				"box" : 				{
					"id" : "obj-5",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 289.666666666666629, 655.0, 35.0, 22.0 ],
					"text" : "out 2"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 50.0, 14.0, 28.0, 22.0 ],
					"text" : "in 1"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 769.0, 5.0, 28.0, 22.0 ],
					"text" : "in 2"
				}

			}
, 			{
				"box" : 				{
					"code" : "//based on resonator bank code by Graham Wakefield on the c74 forums\r\n//list of models from an article by Nathan Ho\r\n\r\nBuffer mtof_lookup(\"mtof_lookup\");\r\nBuffer prm(\"voice_parameter_buffer\");\r\nBuffer detuning(\"detuning\");\r\n\r\nHistory upda(0);\r\nHistory op(0), ov(0);\r\nHistory model(-1), harm(-1), penv_a(0), penv_t(0);\r\nHistory pos(0.36), vari(0.1), bandwa(0.00065), bandw(0.1), roll(0),key(0), feed(0), gain(1), det(0);\r\nHistory posx(0.36), posy(0.29);\r\nHistory env(0),tpsr(0),selfm(0);\r\n\r\nHistory fo(440); //root\r\n\r\nHistory sum(0);\r\n\r\n\r\nParam voice_is(0, min=0,default=0,max=4096);\r\nParam voice_offset(0);\r\nParam p(64,min=0,default=64,max=128);\r\nParam v(0,min=-1000,default=0,max=1000);\r\n\r\nData freqs(100);\r\nData ofreqs(100);\r\nData amps(100);\r\nData bw(100);\r\n\r\nData hy1(100);\r\nData hy2(100);\r\n\r\n\r\n//so - frequencies are dependent on the model only\r\n//amplitudes are dependent on the strikepoint only\r\n//resonances are dependent on the frequency\r\n\r\n//so -> model and param >> freq ratios\r\n//new note, or new model params >> resonances\r\n//new note, amplitudes\r\n\r\npartialsqrt = 9; //is 1 more than the numer you want (saves some +s later)\r\npartialcount = 64;\r\nmaxp = 64;\r\n\r\nrecalc = 0;\r\n\r\nupda += 1;\r\nif(upda>vectorsize){\r\n\ttpsr = twopi/samplerate;\r\n\tupda = -voice_is;\r\n\tm = 12*peek(prm,voice_offset, 0,channels=1);\r\n\th = peek(prm,voice_offset+1, 0,channels=1);\r\n\trecalc = (m!=model) || (h!=harm);\r\n\tmodel = m;\r\n\tharm = h;\r\n\tpenv_a = 16*peek(prm,voice_offset+2, 0,channels=1);\r\n\tpenv_t = 0.9+0.1*peek(prm,voice_offset+3, 0,channels=1);\r\n\t\r\n\t\r\n\tpos = peek(prm,voice_offset+4, 0,channels=1);\r\n\t\r\n\tposx = 0.5 * (1 + sin(pos*15)*pos);\r\n\tposy = 0.5 * (1 + cos(pos*15)*pos);\r\n\t\r\n\tvari = peek(prm,voice_offset+5, 0,channels=1);\r\n\t\r\n\tb = peek(prm,voice_offset+6, 0,channels=1);\r\n\tbandw = 10*(pow(100, b) - 1)*0.01010101010101010101010101010101;\r\n\t\r\n\troll = 10000000 * peek(prm,voice_offset+7, 0,channels=1);\r\n\tkey = 0.00005* peek(prm,voice_offset+8, 0,channels=1);\r\n\t\r\n\tfeed = 1 - 2*peek(prm,voice_offset+9, 0,channels=1);\r\n\tselfm = (feed<0) ? (pow(100, -feed) - 1)*0.01010101010101010101010101010101 : 0;\r\n\tfeed = (feed<0) ? 0 : (pow(100, feed) - 1)*0.01010101010101010101010101010101;\r\n\t\r\n\tgain = 4*peek(prm,voice_offset+10, 0,channels=1) - 2;\r\n\toct = 16*peek(prm,voice_offset+11, 0,channels=1) - 8;\r\n\tdet = 12 * oct + 48*peek(prm,voice_offset+12, 0,channels=1) - 24;\r\n}\r\n\r\nif(recalc){\r\n\t//work out freqs\r\n\tm = model;\r\n\th = 2*(pow(100, harm) - 1)*0.01010101010101010101010101010101;\r\n\t\r\n\t\r\n\tif(model<1){//elements string\r\n\t\tfor(i=0;i<maxp;i += 1){\r\n\t\t\tpoke(freqs, (1+i)*(1 + (i)*h)  * tpsr ,i);\r\n\t\t}\r\n\t}else if(model<2){//stiff string (piano)\r\n\t\tfor(i=0;i<64;i += 1){\r\n\t\t\tpoke(freqs, (1+i)*sqrt(1 + (i+1)*(i+1)*h)  * tpsr ,i);\r\n\t\t}\t\t\r\n\t}else if(model<3){//free beam (xylo)\r\n\t\tpoke(freqs, 1.50561873 * tpsr ,0);\r\n\t\tpoke(freqs, 2.49975267 * (1 + h)  * tpsr ,1);\t\t\r\n\t\tfor(i=2;i<maxp;i += 1){\r\n\t\t\tpoke(freqs, (1.5+i)*(1 + (i)*h)  * tpsr ,i);\r\n\t\t}\t\t\r\n\t}else if(model<4){//cantilevered beam (mbira)\r\n\t\tpoke(freqs, 0.59686416 * tpsr ,0);\r\n\t\tpoke(freqs, 1.49417561 * (1 + h) * tpsr ,1);\r\n\t\tpoke(freqs, 2.50024695 * (1 + 2*h) * tpsr ,2);\r\n\t\tfor(i=3;i<maxp;i += 1){\r\n\t\t\tpoke(freqs, (1.5+i)*(1 + (i)*h)  * tpsr ,i);\r\n\t\t}\t\t\t\r\n\t}else if(model<5){ //rectangular membrane\r\n\t\ti=0;\r\n\t\tfor(x=1;x < partialsqrt;x += 1){\r\n\t\t\tfor(y=1;y < partialsqrt; y += 1){\r\n\t\t\t\tpoke(freqs, sqrt(x*x + (1.1+2*h)*y*y) * tpsr, i);\r\n\t\t\t\ti += 1;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}else if(model<6){ //clamped rectangular plate\r\n\t\ti=0;\r\n\t\tfor(x=1;x < partialsqrt;x += 1){\r\n\t\t\tfor(y=1;y < partialsqrt; y += 1){\r\n\t\t\t\tpoke(freqs, (x*x + (1.1+2*h)*y*y) * tpsr, i);\r\n\t\t\t\ti += 1;\r\n\t\t\t}\r\n\t\t}\t\r\n\t}else if(model<7){\r\n\t\ti=0;\t\t\r\n\t\tfor(x=1;x < partialsqrt;x += 1){\r\n\t\t\tabfn = (1.1 + 2*h)*1.50561873;\r\n\t\t\tpoke(freqs, sqrt(x*x*x*x + abfn*abfn*abfn*abfn) * tpsr, i);\r\n\t\t\ti += 1;\r\n\t\t\tabfn = (1.1 + 2*h)*2.49975267;\r\n\t\t\tpoke(freqs, sqrt(x*x*x*x + abfn*abfn*abfn*abfn) * tpsr, i);\r\n\t\t\ti += 1;\r\n\r\n\t\t\tfor(y=2;y < partialsqrt; y += 1){\r\n\t\t\t\tabfn = (1.1 + 2*h)*(y+0.5);\r\n\t\t\t\tpoke(freqs, sqrt(x*x*x*x + abfn*abfn*abfn*abfn) * tpsr, i);\r\n\t\t\t\ti += 1;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}else if(model<8){\r\n\t\ti=0;\t\t\r\n\t\tfor(x=1;x < partialsqrt;x += 1){\r\n\t\t\tabfn = (1.1 + 2*h)*0.59686416;\r\n\t\t\tpoke(freqs, sqrt(x*x*x*x + abfn*abfn*abfn*abfn) * tpsr, i);\r\n\t\t\ti += 1;\r\n\t\t\tabfn = (1.1 + 2*h)*1.49417561;\r\n\t\t\tpoke(freqs, sqrt(x*x*x*x + abfn*abfn*abfn*abfn) * tpsr, i);\r\n\t\t\ti += 1;\r\n\t\t\tabfn = (1.1 + 2*h)*2.50024695;\r\n\t\t\tpoke(freqs, sqrt(x*x*x*x + abfn*abfn*abfn*abfn) * tpsr, i);\r\n\t\t\ti += 1;\r\n\r\n\t\t\tfor(y=3;y < partialsqrt; y += 1){\r\n\t\t\t\tabfn = (1.1 + 2*h)*(y-0.5);\r\n\t\t\t\tpoke(freqs, sqrt(x*x*x*x + abfn*abfn*abfn*abfn) * tpsr, i);\r\n\t\t\t\ti += 1;\r\n\t\t\t}\r\n\t\t}\t\t\t\t\r\n\t}else if(model<9){\r\n\t\ti=0;\t\t\r\n\t\tfor(x=0;x < partialsqrt;x += 1){\r\n\t\t\txx = x+0.5;\r\n\t\t\tif(x==0){\r\n\t\t\t\txx = 1.50561873;\r\n\t\t\t}else if(x==1){\r\n\t\t\t\txx = 2.4997526;\r\n\t\t\t}\r\n\t\t\tabfn = (1.1 + 2*h)*1.50561873;\r\n\t\t\tpoke(freqs, sqrt(xx*xx*xx*xx + abfn*abfn*abfn*abfn) * tpsr, i);\r\n\t\t\ti += 1;\r\n\t\t\tabfn = (1.1 + 2*h)*2.49975267;\r\n\t\t\tpoke(freqs, sqrt(xx*xx*xx*xx + abfn*abfn*abfn*abfn) * tpsr, i);\r\n\t\t\ti += 1;\r\n\r\n\t\t\tfor(y=2;y < partialsqrt; y += 1){\r\n\t\t\t\tabfn = (1.1 + 2*h)*(y+0.5);\r\n\t\t\t\tpoke(freqs, sqrt(xx*xx*xx*xx + abfn*abfn*abfn*abfn) * tpsr, i);\r\n\t\t\t\ti += 1;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\t\r\n\t}else if(model<10){ // 'GOOD VIOLIN'\r\n\t\tpoke(freqs, 1.012880786 * tpsr, 0);\r\n\t\tpoke(freqs, 1.5097657 * tpsr * (1 + h), 1);\r\n\t\tpoke(freqs, 1.643542407 * tpsr * (1 + 2 * h), 2);\r\n\t\tpoke(freqs, 2.102205405 * tpsr * (1 + 3 * h), 3);\r\n\t\tpoke(freqs, 2.541757444 * tpsr * (1 + 4 * h), 4);\r\n\t\tpoke(amps, 0.4466835922, 0);\r\n\t\tpoke(amps, 0.1995262315, 1);\r\n\t\tpoke(amps, 0.2818382931, 2);\r\n\t\tpoke(amps, 0.5011872336, 3);\r\n\t\tpoke(amps, 0.7079457844, 4);\r\n\t\tpoke(bw, (500/12.74053722) * tpsr, 0);\r\n\t\tpoke(bw, (500/11.3936358) * tpsr, 1);\r\n\t\tpoke(bw, (500/15.5062854) * tpsr, 2);\r\n\t\tpoke(bw, (500/13.2215544) * tpsr, 3);\r\n\t\tpoke(bw, (500/15.98726452) * tpsr, 4);\r\n\t\tfor(i=5;i<maxp;i += 1){\r\n\t\t\tpoke(freqs, 99999,i);\r\n\t\t\tpoke(amps, 0, i);\r\n\t\t\tpoke(bw, 0.5, i);\r\n\t\t}\t\t\r\n\t}else if(model<11){ // 'BAD VIOLIN'\r\n\t\tpoke(freqs, 1.127546535 * tpsr, 0);\r\n\t\tpoke(freqs, 1.5097657 * tpsr * (1 + h), 1);\r\n\t\tpoke(freqs, 1.911095822 * tpsr * (1 + 2 * h), 2);\r\n\t\tpoke(freqs, 2.063983488 * tpsr * (1 + 3 * h), 3);\r\n\t\tpoke(freqs, 2.981309483 * tpsr * (1 + 4 * h), 4);\r\n\t\tpoke(amps, 0.4466835922, 0);\r\n\t\tpoke(amps, 0.1584893192, 1);\r\n\t\tpoke(amps, 0.7079457844, 2);\r\n\t\tpoke(amps, 0.5623413252, 3);\r\n\t\tpoke(amps, 0.5011872336, 4);\r\n\t\tpoke(bw, (500/10.63596085) * tpsr, 0);\r\n\t\tpoke(bw, (500/11.3936358)  * tpsr, 1);\r\n\t\tpoke(bw, (500/20.03535183) * tpsr, 2);\r\n\t\tpoke(bw, (500/12.98104691) * tpsr, 3);\r\n\t\tpoke(bw, (500/22.50419139) * tpsr, 4);\r\n\t\tfor(i=5;i<maxp;i += 1){\r\n\t\t\tpoke(freqs, 99999,i);\r\n\t\t\tpoke(amps, 0, i);\r\n\t\t\tpoke(bw, 0.5, i);\r\n\t\t}\r\n\t}else if(model<12){ // 'measured bell'\r\n\t\tpoke(freqs, 1 * tpsr, 0);\r\n\t\tpoke(freqs, 2 * tpsr * (1 + h), 1);\r\n\t\tpoke(freqs, 2.803 * tpsr * (1 + 2 * h), 2);\r\n\t\tpoke(freqs, 3.871 * tpsr * (1 + 3 * h), 3);\r\n\t\tpoke(freqs, 5.074 * tpsr * (1 + 4 * h), 4);\r\n\t\tpoke(freqs, 7.81 * tpsr * (1 + 5 * h), 5);\r\n\t\tpoke(freqs, 10.948 * tpsr * (1 + 6 * h), 6);\r\n\t\tpoke(freqs, 14.421 * tpsr * (1 + 7 * h), 7);\r\n\t\tpoke(amps, 1, 0);\r\n\t\tpoke(amps, 0.044, 1);\r\n\t\tpoke(amps, 0.891, 2);\r\n\t\tpoke(amps, 0.0891, 3);\r\n\t\tpoke(amps, 0.794, 4);\r\n\t\tpoke(amps, 0.1, 5);\r\n\t\tpoke(amps, 0.281, 6);\r\n\t\tpoke(amps, 0.079, 7);\r\n\t\ttpsr4 = tpsr * 40;\r\n\t\tpoke(bw, 1 * tpsr4, 0);\r\n\t\tpoke(bw, 0.205  * tpsr4, 1);\r\n\t\tpoke(bw, 1 * tpsr4, 2);\r\n\t\tpoke(bw, 0.196 * tpsr4, 3);\r\n\t\tpoke(bw, 0.339 * tpsr4, 4);\r\n\t\tpoke(bw, 0.047 * tpsr4, 5);\r\n\t\tpoke(bw, 0.058 * tpsr4, 6);\r\n\t\tpoke(bw, 0.047 * tpsr4, 7);\r\n\t\tfor(i=8;i<maxp;i += 1){\r\n\t\t\tpoke(freqs, 99999,i);\r\n\t\t\tpoke(amps, 0, i);\r\n\t\t\tpoke(bw, 0.5, i);\r\n\t\t}\t\t\t\t\r\n\t}\r\n}\r\nnp = p + det;\r\nif((op != np)||(recalc)){\r\n\t//work out resonances\r\n\tif(model<9){\r\n\t\ttk = key*(fo*fo);\r\n\t\tfor(i=0;i<maxp;i += 1){\r\n\t\t\tf= peek(freqs, i);\r\n\t\t\tr = 1 + roll*f*f + tk;\r\n\t\t\tpoke(bw, r *  tpsr,i);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nx = in1;// + tanh(sum)*feed;\r\n\r\nif((ov!=v)&&(v!=0)){\r\n\t// TODO: a blue curve, 3db highpass\r\n\tenv+=abs(v);\r\n\tx += v;\r\n\t//work out position:\r\n\tif(model>=9){\r\n\t}else if(model >= 4){ //2D!\r\n\t\tpx = posx + vari*(noise()+noise()+noise()+noise()+noise())*0.2;\r\n\t\tpy = posy + vari*(noise()+noise()+noise()+noise()+noise())*0.2;\r\n\t\t//work out amplitudes\r\n\t\ti=0;\r\n\t\tfor(m=1;m< partialsqrt;m += 1){\r\n\t\t\tfor(n=1;n< partialsqrt;n += 1){\r\n\t\t\t\tpoke(amps, 0.25 * sin(3.1415*m*px)*sin(3.1415*n*py), i);\r\n\t\t\t\ti += 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}else{ //1D\r\n\t\tpx = pos + vari*(noise()+noise()+noise()+noise()+noise())*0.2;\r\n\t\t//work out amplitudes\r\n\t\tfor(i=0;i<maxp;i += 1){\r\n\t\t\tpoke(amps, 0.125 * sin(3.1415*(1+i)*px), i);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nov = v;\r\n\r\nenv *= penv_t;\r\n\r\nif(op != np){\r\n\tfo = peek(mtof_lookup, np, (voice_is % 8), channels=1);\r\n\top = np;\r\n}\r\n\r\nx*=0.25;\r\n\r\nsum = 0;\r\nfor (i=0; i< maxp; i+= 1) {\r\n\t// read this resonator's data:\r\n\tof = peek(ofreqs, i);\r\n\tof = 0.998*of +0.002*peek(freqs,i);\r\n\tpoke(ofreqs,of,i); //smoothing on freqs\r\n\t\r\n\tfreq_rps = (1+in2+penv_a*env + tanh(sum)*selfm) * fo * of; //peek(freqs, i);\r\n\tif(freq_rps<3){\r\n\t\ty2 = peek(hy2, i);\r\n\t\ty1 = peek(hy1, i);\r\n\t\tamp = peek(amps, i) * gain;\r\n\t\tbw_rps = bandw * peek(bw, i);\r\n\t\r\n\t\t// calculate coefficients:\n\t\tb = 2 * cos(freq_rps) * exp(bw_rps * -0.5);\n\t\tc = -exp(-bw_rps);\n\t\ta = 1 - ((c + b));\r\n\t\r\n\t\t// compute next y:\r\n\t\ty = clip(a*x + b*y1 + c*y2,-1,1);\r\n\t\t// update this resonator's history:\r\n\t\tpoke(hy2, y1, i);\r\n\t\tpoke(hy1, y, i);\r\n\r\n\t\t// mix into output:\r\n\t\t//sum += sin(clip(y * amp,-1.55,1.55));\r\n\t\tsum += y * amp;\r\n\t}\r\n}\r\n\r\nout1 = sum; //asin(sum);\r\nout2 = env; //peek(freqs,0)*fo * samplerate/twopi;//harm; //recalc; \r\n//out3 = peek(freqs, 1)*fo * samplerate/twopi;\r\n//out4 = peek(freqs, 2)*fo * samplerate/twopi;",
					"fontface" : 0,
					"fontname" : "<Monospaced>",
					"fontsize" : 12.0,
					"id" : "obj-3",
					"maxclass" : "codebox",
					"numinlets" : 2,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 50.0, 44.0, 738.0, 598.0 ]
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-4",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 50.0, 662.0, 35.0, 22.0 ],
					"text" : "out 1"
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 0 ],
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 1 ],
					"source" : [ "obj-2", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-4", 0 ],
					"source" : [ "obj-3", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-5", 0 ],
					"source" : [ "obj-3", 1 ]
				}

			}
 ],
		"originid" : "pat-3500"
	}

}
