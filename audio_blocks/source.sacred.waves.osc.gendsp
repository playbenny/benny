{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 9,
			"minor" : 0,
<<<<<<< HEAD
			"revision" : 7,
=======
			"revision" : 5,
>>>>>>> main
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"classnamespace" : "dsp.gen",
		"rect" : [ 34.0, 100.0, 1001.0, 822.0 ],
		"gridsize" : [ 15.0, 15.0 ],
		"boxes" : [ 			{
				"box" : 				{
<<<<<<< HEAD
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 1233.0, 844.0, 35.0, 22.0 ],
					"text" : "out 2"
				}

			}
, 			{
				"box" : 				{
					"code" : "\r\nHistory phase(0);\r\nHistory phase_B(0);\r\nHistory phase_S(0);\r\nHistory h1(0), h2(0);\r\nHistory h3(0), h4(0);\r\nHistory srate(0), freq(0);\r\nHistory srate_B(0), freq_B(0);\r\nHistory os(4), sr(0);\r\nHistory osb(4), sr_B(0);\r\nHistory OALP(0);\r\n\r\n\r\nParam notein(0);\r\nParam rsr(0.000023);\r\nParam volume(1);\r\nParam velocity(0);\r\nParam notereset(0);\r\nParam porta(0);\r\nParam octave(0);\r\nParam semi(0);\r\nParam fine(0);\r\nParam osc_sync(0);\r\n\r\nParam table(731);\r\n\r\nParam A_level(1);\r\nParam shape_A(0);\r\nParam PWMAmount_A(0);\r\n\r\nParam S_level(0);\r\nParam shape_S(0);\r\nParam sub_oct(0);\r\n\r\nParam B_level(0);\r\nParam shape_B(0);\r\nParam PWMAmount_B(0);\r\nParam crossmodB(0);\r\nParam octave_B(0);\r\nParam interval(0);\r\nParam fine_offset(0);\r\nParam sync_phase(0);\r\n\r\nBuffer tri(\"tri\");\r\nBuffer squ(\"squ\");\r\nBuffer saw(\"saw\");\r\n\r\nslug = mstosamps(10);\r\n\r\nplaynote = notein;\r\noct = selector((octave + 4), 0.125, 0.25, 0.5, 1, 2, 4, 8);\r\ninput_note = slide((playnote - 12), mstosamps(porta), mstosamps(porta));\r\nHzA = mtof(12 + input_note + semi + fine) * oct;\r\ns_oct = (sub_oct > 0.5) ? 0.25 : 0.5;\r\nSubHz = HzA * s_oct;\r\nos_phasor = 0;\r\npeekphase = 0;\r\nsyncA = 0;\r\npwmA = 0;\r\nPhaseDistA = 0;\r\nOscA = 0;\r\nPWMAmountA = slide(PWMAmount_A, slug, slug);\r\nPWMLeanA = scale(PWMAmountA, -0.5, 0.5, 0.99, 0.1);\r\nshapeA = slide(shape_A, slug, slug);\r\n\r\noct_B = selector((octave_B + 4), 0.125, 0.25, 0.5, 1, 2, 4, 8);\r\nHzB = (mtof(12 + input_note + semi + fine + interval + fine_offset)) * oct_B * oct;\r\nos_phasor_B = 0;\r\npeekphase_B = 0;\r\nsyncB = 0;\r\npwmB = 0;\r\nPhaseDistB = 0;\r\nOscB = 0;\r\nPWMAmountB = slide(PWMAmount_B, slug, slug);\r\nPWMLeanB = scale(PWMAmountB, -0.5, 0.5, 0.99, 0.1);\r\nshapeB = slide(shape_B, slug, slug);\r\ncrossmod = clamp(crossmodB, 0, 1);\r\n\r\nmixed = 0;\r\nSub = 0;\r\nosc_phase = slide(sync_phase, slug, slug);\r\n\r\nif ((srate != samplerate) || freq != HzA)\r\n{\r\n\tos = int((48000 / samplerate) * (2 + (14 * (scale(HzA, 10, 12000, 0, 1, 0.5)))));\r\n\tos = (os == 0) ? 1 : os;\r\n\tsr = samplerate * os;\r\n\tsrate = samplerate;\r\n\tfreq = HzA;\r\n\r\n}\r\n\r\nfor (dd = 0; dd < os; dd += 1) \r\n{\r\n\tos_phasor = wrap(phase, 0, 1);\n\tphase = fixdenorm(os_phasor + (HzA / sr));\r\n\t\r\n\tos_phasor_S = wrap(phase_S, 0, 1);\n\tphase_S = fixdenorm(os_phasor_S + (SubHz / sr));\r\n\t\r\n\tos_phasor_B = wrap(phase_B, 0, 1);\n\tphase_B = fixdenorm(os_phasor_B + (HzB / sr));\r\n\t\r\n\tpwmA = triangle(os_phasor, PWMLeanA) * PWMAmountA;\r\n\tpeekphase = (os_phasor + pwmA) * table;\r\n\tpeekphase = fold(peekphase, 0, table);\r\n\tpp1 = trunc(peekphase);\r\n\tpp2 = pp1 + 1;\r\n\tpp3 = fract(peekphase);\t\r\n\tlookup_1 = (shapeA < 0.5) ? mix(peek(tri, pp1), peek(tri, pp2), pp3) : mix(peek(squ, pp1), peek(squ, pp2), pp3);\r\n\tlookup_2 = (shapeA < 0.5) ? mix(peek(squ, pp1), peek(squ, pp2), pp3) : mix(peek(saw, pp1), peek(saw, pp2), pp3);\r\n\tOscA = (shapeA < 0.5) ? mix(lookup_1, lookup_2, (shapeA * 2)) : mix(lookup_1, lookup_2, ((shapeA - 0.5) * 2));\r\n\tOALP = mix(OscA, OALP, 0.13606);\r\n\t\r\n\tpeekphase_S = os_phasor_S * table;\r\n\tpeekphase_S = fold(peekphase_S, 0, table);\r\n\tpp1s = trunc(peekphase_S);\r\n\tpp2s = pp1s + 1;\r\n\tpp3s = fract(peekphase_S);\r\n\tSub = mix(mix(peek(tri, pp1s), peek(tri, pp2s), pp3s), mix(peek(squ, pp1s), peek(squ, pp2s), pp3s), shape_S);\t\r\n\t\r\n\t\r\n\tpwmB = triangle(os_phasor_B, PWMLeanB) * PWMAmountB;\r\n\tpeekphase_B = (os_phasor_B + pwmB + (crossmod * OALP)) * table;\r\n\tpeekphase_B = fold(peekphase_B, 0, table);\r\n\tpp1b = trunc(peekphase_B);\r\n\tpp2b = pp1b + 1;\r\n\tpp3b = fract(peekphase_B);\t\r\n\tlookup_1B = (shapeB < 0.5) ? mix(peek(tri, pp1b), peek(tri, pp2b), pp3b) : mix(peek(squ, pp1b), peek(squ, pp2b), pp3b);\r\n\tlookup_2B = (shapeB < 0.5) ? mix(peek(squ, pp1b), peek(squ, pp2b), pp3b) : mix(peek(saw, pp1b), peek(saw, pp2b), pp3b);\r\n\tOscB = (shapeB < 0.5) ? mix(lookup_1B, lookup_2B, (shapeB * 2)) : mix(lookup_1B, lookup_2B, ((shapeB - 0.5) * 2));\r\n\t\r\n\tmixed = (OscA * A_level) + (OscB * B_level) + (Sub * S_level);\r\n\n\tomega = ((20000 * twopi)) / sr;\n\tsn = sin(omega);\n\tcs = cos(omega);\r\n\t\n\tb0 = 1 / (1 + sn);\n\ta2 = ((1 - cs) * 0.5) * b0;\n\ta1 = (1 - cs) * b0;\n\tb1 = (-2 * cs) * b0;\n\tb2 = (1 - sn) * b0;\r\n\t\r\n\tmixed =  (((mixed * a2) + (h2 * a1)) + (h1 * a2)) - ((h1 * b2) + (h2 * b1));\r\n\t\r\n\tOALP = OscA;\r\n\th1 = fixdenorm(h2);\t\n\th2 = fixdenorm(mixed);\r\n}\r\n\r\nmixed = mixed * 0.75;\r\noutput = mixed;\r\n\r\nsyncB = (osc_sync == 1) ? ((0 - delta(os_phasor)) > 0.5) : 0;\r\nphase_B = (syncB == 1) ? osc_phase : phase_B;\r\n\r\nout1, out2 = output, Sub;\r\n",
					"fontface" : 0,
					"fontname" : "<Monospaced>",
					"fontsize" : 15.999999999996,
=======
					"code" : "\r\nHistory phase(0);\r\nHistory phase_B(0);\r\nHistory phase_S(0);\r\nHistory h1(0), h2(0);\r\nHistory h3(0), h4(0);\r\nHistory srate(0), freq(0);\r\nHistory srate_B(0), freq_B(0);\r\nHistory os(4), sr(0);\r\nHistory osb(4), sr_B(0);\r\nHistory OALP(0);\r\n\r\nParam notein(0);\r\nParam rsr(0.000023);\r\nParam volume(1);\r\nParam velocity(0);\r\nParam notereset(0);\r\nParam porta(0);\r\nParam octave(0);\r\nParam semi(0);\r\nParam fine(0);\r\nParam osc_sync(0);\r\nParam voice_is(0);\r\n\r\nParam table(731);\r\n\r\nParam A_level(1);\r\nParam shape_A(0);\r\nParam PWMAmount_A(0);\r\n\r\nParam S_level(0);\r\nParam shape_S(0);\r\nParam sub_oct(0);\r\n\r\nParam B_level(0);\r\nParam shape_B(0);\r\nParam PWMAmount_B(0);\r\nParam crossmodB(0);\r\nParam octave_B(0);\r\nParam interval(0);\r\nParam fine_offset(0);\r\nParam sync_phase(0);\r\n\r\nBuffer tri(\"tri\");\r\nBuffer squ(\"squ\");\r\nBuffer saw(\"saw\");\r\nBuffer mtof_lookup(\"mtof_lookup\"); \r\n\r\nslug = mstosamps(10);\r\n\r\nplaynote = notein;\r\noct = selector((octave + 4), 0.125, 0.25, 0.5, 1, 2, 4, 8);\r\ninput_note = slide((playnote - 12), mstosamps(porta), mstosamps(porta));\r\nHzA = peek(mtof_lookup, (12 + input_note + semi + fine), (voice_is % 8), channels=1, interp = \"linear\") * oct;\r\ns_oct = (sub_oct > 0.5) ? 0.25 : 0.5;\r\nSubHz = HzA * s_oct;\r\nos_phasor = 0;\r\npeekphase = 0;\r\nsyncA = 0;\r\npwmA = 0;\r\nPhaseDistA = 0;\r\nOscA = 0;\r\nPWMAmountA = slide(PWMAmount_A, slug, slug);\r\nPWMLeanA = scale(PWMAmountA, -0.5, 0.5, 0.99, 0.1);\r\nshapeA = slide(shape_A, slug, slug);\r\n\r\noct_B = selector((octave_B + 4), 0.125, 0.25, 0.5, 1, 2, 4, 8);\r\nHzB = peek(mtof_lookup, (12 + input_note + semi + fine + interval + fine_offset), (voice_is % 8), channels=1, interp = \"linear\") * oct_B * oct;\r\nos_phasor_B = 0;\r\npeekphase_B = 0;\r\nsyncB = 0;\r\npwmB = 0;\r\nPhaseDistB = 0;\r\nOscB = 0;\r\nPWMAmountB = slide(PWMAmount_B, slug, slug);\r\nPWMLeanB = scale(PWMAmountB, -0.5, 0.5, 0.99, 0.1);\r\nshapeB = slide(shape_B, slug, slug);\r\ncrossmod = clamp(crossmodB, 0, 1);\r\n\r\nsr = samplerate;\r\n\r\nmixed = 0;\r\nSub = 0;\r\nosc_phase = slide(sync_phase, slug, slug);\r\n\r\n\r\n\tos_phasor = phasor(HzA, 0);\n\r\n\tos_phasor_S = phasor(SubHz, 0);\n\r\n\tsyncB = (osc_sync == 1) ? ((0 - delta(os_phasor)) > 0.5) : 0;\r\n\tos_phasor_B = phasor(HzB, syncB);\r\n\tsync_b = slide(sync_phase, slug, slug);\r\n\tos_phasor_B = wrap((os_phasor_B + sync_b), 0, 1);\n\r\n\tpwmA = triangle(os_phasor, PWMLeanA) * PWMAmountA;\r\n\tpeekphase = (os_phasor + pwmA) * table;\r\n\tpeekphase = fold(peekphase, 0, table);\r\n\tpp1 = trunc(peekphase);\r\n\tpp2 = pp1 + 1;\r\n\tpp3 = fract(peekphase);\t\r\n\tlookup_1 = (shapeA < 0.5) ? mix(peek(tri, pp1), peek(tri, pp2), pp3) : mix(peek(squ, pp1), peek(squ, pp2), pp3);\r\n\tlookup_2 = (shapeA < 0.5) ? mix(peek(squ, pp1), peek(squ, pp2), pp3) : mix(peek(saw, pp1), peek(saw, pp2), pp3);\r\n\tOscA = (shapeA < 0.5) ? mix(lookup_1, lookup_2, (shapeA * 2)) : mix(lookup_1, lookup_2, ((shapeA - 0.5) * 2));\r\n\tOALP = mix(OscA, OALP, 0.13606);\r\n\t\r\n\tpeekphase_S = os_phasor_S * table;\r\n\tpeekphase_S = fold(peekphase_S, 0, table);\r\n\tpp1s = trunc(peekphase_S);\r\n\tpp2s = pp1s + 1;\r\n\tpp3s = fract(peekphase_S);\r\n\tSub = mix(mix(peek(tri, pp1s), peek(tri, pp2s), pp3s), mix(peek(squ, pp1s), peek(squ, pp2s), pp3s), shape_S);\t\r\n\t\r\n\t\r\n\tpwmB = triangle(os_phasor_B, PWMLeanB) * PWMAmountB;\r\n\tpeekphase_B = (os_phasor_B + pwmB + (crossmod * OALP)) * table;\r\n\tpeekphase_B = fold(peekphase_B, 0, table);\r\n\tpp1b = trunc(peekphase_B);\r\n\tpp2b = pp1b + 1;\r\n\tpp3b = fract(peekphase_B);\t\r\n\tlookup_1B = (shapeB < 0.5) ? mix(peek(tri, pp1b), peek(tri, pp2b), pp3b) : mix(peek(squ, pp1b), peek(squ, pp2b), pp3b);\r\n\tlookup_2B = (shapeB < 0.5) ? mix(peek(squ, pp1b), peek(squ, pp2b), pp3b) : mix(peek(saw, pp1b), peek(saw, pp2b), pp3b);\r\n\tOscB = (shapeB < 0.5) ? mix(lookup_1B, lookup_2B, (shapeB * 2)) : mix(lookup_1B, lookup_2B, ((shapeB - 0.5) * 2));\r\n\t\r\n\tmixed = (OscA * A_level) + (OscB * B_level) + (Sub * S_level);\r\n\n\tomega = ((20000 * twopi)) / sr;\n\tsn = sin(omega);\n\tcs = cos(omega);\r\n\t\n\tb0 = 1 / (1 + sn);\n\ta2 = ((1 - cs) * 0.5) * b0;\n\ta1 = (1 - cs) * b0;\n\tb1 = (-2 * cs) * b0;\n\tb2 = (1 - sn) * b0;\r\n\t\r\n\tmixed =  (((mixed * a2) + (h2 * a1)) + (h1 * a2)) - ((h1 * b2) + (h2 * b1));\r\n\t\r\n\tOALP = OscA;\r\n\th1 = fixdenorm(h2);\t\n\th2 = fixdenorm(mixed);\r\n\r\nmixed = mixed * 0.75;\r\noutput = mixed;\r\n\r\n// syncB = (osc_sync == 1) ? ((0 - delta(os_phasor)) > 0.5) : 0;\r\n// phase_B = (syncB == 1) ? osc_phase : phase_B;\r\n\r\nout1, out2 = output, Sub;\r\n",
					"fontface" : 0,
					"fontname" : "<Monospaced>",
					"fontsize" : 12.0,
>>>>>>> main
					"id" : "obj-5",
					"maxclass" : "codebox",
					"numinlets" : 1,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
<<<<<<< HEAD
					"patching_rect" : [ 50.0, 39.0, 1288.0, 771.0 ]
=======
					"patching_rect" : [ 50.0, 48.0, 938.0, 672.0 ]
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 969.0, 807.0, 35.0, 22.0 ],
					"text" : "out 2"
>>>>>>> main
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 50.0, 14.0, 28.0, 22.0 ],
					"text" : "in 1"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-4",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 50.0, 833.0, 35.0, 22.0 ],
					"text" : "out 1"
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-5", 0 ],
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-2", 0 ],
					"source" : [ "obj-5", 1 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-4", 0 ],
					"source" : [ "obj-5", 0 ]
				}

			}
<<<<<<< HEAD
 ]
=======
 ],
		"originid" : "pat-3854"
>>>>>>> main
	}

}
