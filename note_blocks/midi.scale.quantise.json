{
	"midi.scale.quantise" : {
		"patcher" : "midi.scale.quantise",
		"type" : "note",
		"block_ui_patcher" : "blank.ui",
		"help_text" : "Quantises notes to scales. ££In quantise mode the first note in the scale below the incoming one is picked, in index mode the note number of the input is used as the index in the list of notes in the scale. For example if the scale was CEG and you played C0,C#0,F0 into it in quantise mode you'd get C0,C0,E0, in index mode you'd get C0,E0,G1. ££Scales are saved and can be dynamically set by incoming midi in the core.scales.shapes block, so this will be loaded automatically. ££This block works efficiently for fast note streams (including if you patch an audio signal to the note in) but there is also a utility.audio.scale.quantise which works all the way up to audio rate.",
		"max_polyphony" : 0,
		"upsample" : 1,
		"connections" : {
			"in" : {
				"midi" : [ "notes in" ]
			},
			"out" : {
				"midi" : [ "notes out" ]
			}
		},
		"groups" : [
			{ 
				"contains" : [0,0,0,0,3],
				"height" : 0
			},{
				"contains" :  [ 1, 2, 4],
				"height" : 2
			}		
		],
		"parameters" : [
			{
				"name" : "scale",
				"type" : "scale",
				"values" : ["chromatic","1","2","3","4","5","6","7","8"],
				"wrap" : 1,
				"error_scale" : 0,
				"default" : 0.05
			},
			{
				"name" : "mode",
				"type" : "menu_l",
				"values" : ["quantise", "index"],
				"wrap" : 1,
				"error_scale" : 0,
				"default" : 0,
				"force_label" : 1
			},
			{
				"name" : "pre shift",
				"type" : "int",
				"values" : ["bi", -48, 48, "lin"],
				"wrap" : 0,
				"default" : 0.5
			},
			{
				"name" : "edit_scales",
				"type" : "button",
				"values" : ["core","jump to_scales_block","jump_to_scales_shapes"],
				"default" : 0
			},
			{
				"name" : "output",
				"type" : "menu_l",
				"values" : [ "on every_note in", "also on_scale change" ],
				"wrap" : 1,
				"error_scale" : 0,
				"default" : 0.1,
				"force_label" : 1
			}
		]
	}
}